#include <iostream>
using namespace std;
char board[25][25];
int pos, n;

bool isPossible(int k,int l){
    for(int i=1;l-i>=0;i++){
        if(board[k][l-i]=='Q')return false;
    }
    for(int i=1;(k-i>=0 && l-i>=0);i++){
        if(board[k-i][l-i]=='Q')return false;
    }
    for(int i=1;(k+i<n && l-i>=0);i++){
        if(board[k+i][l-i]=='Q')return false;
    }
    return true;
}

bool placeAll(int y) {
    if (y >= n) {
        return true;
    }
    for (int x = 0; x < n; x++) {
        if (isPossible(x,y)) {
            board[x][y] = 'Q';
            if (placeAll(y + 1) == false) {
                board[x][y] = '.';
            } else return true;
        }
    }
    return false;
}

int main() {
    cin >> n >> pos;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] = '.';
        }
    }
    board[pos - 1][0] = 'Q';
    placeAll(1);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << board[i][j];
        }
        cout << endl;
    }
    return 0;
}
/*Расстановка ферзей
Расставьте N ферзей на шахматной доске размера N x N так, чтобы они не били друг друга. При этом вам будет задан номер строки, в которой должен быть ферзь, находящийся в первом столбце.

Формат входных данных
Первая строка ввода содержит единственное натуральное число N (4 ≤ N ≤ 25) - размер доски.

Вторая строка содержит натуральное число P (1 ≤ P ≤ N) - позицию (номер строки) ферзя в первом столбце.

Входные данные будут такими, что нужная расстановка ферзей всегда есть.

Формат результата
Выведите N строк, в каждой из которых содержится ровно N символов. Пустой клетке доски должен соответствовать символ '.' (точка), а клетке, в которой находится ферзь - символ 'Q' (большая буква Q латинского алфавита).

Можно вывести любую расстановку ферзей, в которой они не бьют друг друга. При этом ферзь, находящийся в первом столбце должен быть расположен в заданной позиции.*/